# GitHub Actions workflow for Fabric Workload Template
# This workflow builds and deploys a React frontend with .NET isolated Azure Functions API
# to Azure Static Web Apps with configurable environments

name: Deploy Fabric Workload

on:
    push:
        branches:
            - main
            - develop
        paths-ignore:
            - "README.md"
            - "TEMPLATE_README.md"
            - "docs/**"
            - ".env.*"
    pull_request:
        branches:
            - main
            - develop
        paths-ignore:
            - "README.md"
            - "TEMPLATE_README.md"
            - "docs/**"
            - ".env.*"

env:
    # Workload configuration - Update these for your specific workload
    WORKLOAD_NAME: "TemplateWorkload"
    WORKLOAD_VERSION: "1.0.0"
    RESOURCE_GROUP: "TemplateWorkload-01"

    # Build configuration
    NODE_VERSION: "20.x"
    DOTNET_VERSION: "8.x"

    # App locations
    APP_LOCATION: "app"
    API_LOCATION: "api"
    OUTPUT_LOCATION: "dist"

jobs:
    build:
        name: Build Application
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  submodules: recursive

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"
                  cache-dependency-path: ${{ env.APP_LOCATION }}/package-lock.json

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Install npm dependencies
              run: |
                  cd ${{ env.APP_LOCATION }}
                  npm ci

            - name: Build frontend application
              run: |
                  cd ${{ env.APP_LOCATION }}
                  npm run build:prod

            - name: Restore .NET dependencies
              run: |
                  cd ${{ env.API_LOCATION }}
                  dotnet restore

            - name: Build .NET API
              run: |
                  cd ${{ env.API_LOCATION }}
                  dotnet build --configuration Release --no-restore

            - name: Publish .NET API
              run: |
                  cd ${{ env.API_LOCATION }}
                  dotnet publish --configuration Release --output ../build/api --no-build

            - name: Copy frontend build artifacts
              run: |
                  mkdir -p build/app
                  cp -r ${{ env.APP_LOCATION }}/${{ env.OUTPUT_LOCATION }}/* build/app/

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: workload-build
                  path: build/

    # Development deployment
    deploy-dev:
        name: Deploy to Development
        needs: build
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        environment: development

        steps:
            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: workload-build
                  path: build/

            - name: Deploy to Azure Static Web Apps
              uses: Azure/static-web-apps-deploy@v1
              with:
                  azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_DEV_TOKEN }}
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  action: "upload"
                  app_location: "build/app"
                  api_location: "build/api"
                  skip_app_build: true
                  skip_api_build: true

    # Production deployment
    deploy-prod:
        name: Deploy to Production
        needs: build
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        environment: production

        steps:
            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: workload-build
                  path: build/

            - name: Deploy to Azure Static Web Apps
              uses: Azure/static-web-apps-deploy@v1
              with:
                  azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_PROD_TOKEN }}
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  action: "upload"
                  app_location: "build/app"
                  api_location: "build/api"
                  skip_app_build: true
                  skip_api_build: true

    # PR preview deployment
    deploy-preview:
        name: Deploy PR Preview
        needs: build
        runs-on: ubuntu-latest
        if: github.event_name == 'pull_request'
        environment: pr-preview

        steps:
            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: workload-build
                  path: build/

            - name: Deploy to Azure Static Web Apps
              uses: Azure/static-web-apps-deploy@v1
              with:
                  azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_DEV_TOKEN }}
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  action: "upload"
                  app_location: "build/app"
                  api_location: "build/api"
                  skip_app_build: true
                  skip_api_build: true
